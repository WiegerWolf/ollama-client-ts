name: CI/CD Status Dashboard

on:
  workflow_run:
    workflows: ["Continuous Integration", "Regression Detection & Monitoring", "Dependency & Security Monitoring"]
    types: [completed]
  schedule:
    # Update dashboard every hour
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  update-dashboard:
    name: Update CI/CD Dashboard
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.1.34'

      - name: Generate dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get recent workflow runs
            const workflows = ['Continuous Integration', 'Regression Detection & Monitoring', 'Dependency & Security Monitoring'];
            const dashboardData = {
              lastUpdated: new Date().toISOString(),
              workflows: {},
              summary: {
                totalRuns: 0,
                successfulRuns: 0,
                failedRuns: 0,
                successRate: 0
              }
            };
            
            for (const workflowName of workflows) {
              try {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: `${workflowName.toLowerCase().replace(/[^a-z0-9]/g, '-')}.yml`,
                  per_page: 10
                });
                
                const recentRuns = runs.data.workflow_runs.slice(0, 5);
                const successCount = recentRuns.filter(run => run.conclusion === 'success').length;
                const failureCount = recentRuns.filter(run => run.conclusion === 'failure').length;
                
                dashboardData.workflows[workflowName] = {
                  recentRuns: recentRuns.map(run => ({
                    id: run.id,
                    status: run.status,
                    conclusion: run.conclusion,
                    created_at: run.created_at,
                    updated_at: run.updated_at,
                    html_url: run.html_url,
                    head_branch: run.head_branch,
                    head_sha: run.head_sha.substring(0, 7)
                  })),
                  successCount,
                  failureCount,
                  successRate: recentRuns.length > 0 ? (successCount / recentRuns.length * 100).toFixed(1) : 0
                };
                
                dashboardData.summary.totalRuns += recentRuns.length;
                dashboardData.summary.successfulRuns += successCount;
                dashboardData.summary.failedRuns += failureCount;
                
              } catch (error) {
                console.log(`Could not fetch data for workflow: ${workflowName}`);
                dashboardData.workflows[workflowName] = {
                  recentRuns: [],
                  successCount: 0,
                  failureCount: 0,
                  successRate: 0,
                  error: error.message
                };
              }
            }
            
            if (dashboardData.summary.totalRuns > 0) {
              dashboardData.summary.successRate = (dashboardData.summary.successfulRuns / dashboardData.summary.totalRuns * 100).toFixed(1);
            }
            
            // Generate markdown dashboard
            let dashboard = '# 📊 CI/CD Status Dashboard\n\n';
            dashboard += `**Last Updated:** ${new Date(dashboardData.lastUpdated).toLocaleString()}\n\n`;
            
            // Overall summary
            dashboard += '## 📈 Overall Summary\n\n';
            dashboard += `| Metric | Value |\n`;
            dashboard += `|--------|-------|\n`;
            dashboard += `| Total Runs (Last 5 per workflow) | ${dashboardData.summary.totalRuns} |\n`;
            dashboard += `| Successful Runs | ${dashboardData.summary.successfulRuns} |\n`;
            dashboard += `| Failed Runs | ${dashboardData.summary.failedRuns} |\n`;
            dashboard += `| Success Rate | ${dashboardData.summary.successRate}% |\n\n`;
            
            // Status badges
            dashboard += '## 🏷️ Status Badges\n\n';
            dashboard += `![CI](https://github.com/${context.repo.owner}/${context.repo.repo}/workflows/Continuous%20Integration/badge.svg)\n`;
            dashboard += `![Regression Detection](https://github.com/${context.repo.owner}/${context.repo.repo}/workflows/Regression%20Detection%20%26%20Monitoring/badge.svg)\n`;
            dashboard += `![Security](https://github.com/${context.repo.owner}/${context.repo.repo}/workflows/Dependency%20%26%20Security%20Monitoring/badge.svg)\n\n`;
            
            // Workflow details
            dashboard += '## 🔄 Workflow Status\n\n';
            
            Object.entries(dashboardData.workflows).forEach(([workflowName, data]) => {
              dashboard += `### ${workflowName}\n\n`;
              
              if (data.error) {
                dashboard += `❌ **Error:** ${data.error}\n\n`;
                return;
              }
              
              dashboard += `**Success Rate:** ${data.successRate}% (${data.successCount}/${data.recentRuns.length})\n\n`;
              
              if (data.recentRuns.length > 0) {
                dashboard += '| Run | Status | Branch | Commit | Date |\n';
                dashboard += '|-----|--------|--------|--------|------|\n';
                
                data.recentRuns.forEach(run => {
                  const statusIcon = run.conclusion === 'success' ? '✅' : 
                                   run.conclusion === 'failure' ? '❌' : 
                                   run.status === 'in_progress' ? '🔄' : '⏸️';
                  const date = new Date(run.created_at).toLocaleDateString();
                  dashboard += `| [#${run.id}](${run.html_url}) | ${statusIcon} ${run.conclusion || run.status} | ${run.head_branch} | ${run.head_sha} | ${date} |\n`;
                });
                
                dashboard += '\n';
              } else {
                dashboard += '*No recent runs found.*\n\n';
              }
            });
            
            // Health indicators
            dashboard += '## 🏥 Health Indicators\n\n';
            const overallHealth = dashboardData.summary.successRate;
            let healthStatus = '🔴 Critical';
            let healthMessage = 'Multiple workflows failing. Immediate attention required.';
            
            if (overallHealth >= 90) {
              healthStatus = '🟢 Excellent';
              healthMessage = 'All systems operating normally.';
            } else if (overallHealth >= 75) {
              healthStatus = '🟡 Good';
              healthMessage = 'Minor issues detected. Monitor closely.';
            } else if (overallHealth >= 50) {
              healthStatus = '🟠 Warning';
              healthMessage = 'Several issues detected. Investigation recommended.';
            }
            
            dashboard += `**Overall Health:** ${healthStatus}\n`;
            dashboard += `**Status:** ${healthMessage}\n\n`;
            
            // Recommendations
            dashboard += '## 💡 Recommendations\n\n';
            if (overallHealth < 75) {
              dashboard += '- 🔍 Investigate recent failures\n';
              dashboard += '- 📊 Review test coverage and quality\n';
              dashboard += '- 🔧 Check for infrastructure issues\n';
            }
            if (dashboardData.summary.failedRuns > 0) {
              dashboard += '- 📝 Document failure patterns\n';
              dashboard += '- 🚀 Implement additional monitoring\n';
            }
            dashboard += '- 📈 Monitor trends over time\n';
            dashboard += '- 🔄 Keep workflows updated\n\n';
            
            // Quick links
            dashboard += '## 🔗 Quick Links\n\n';
            dashboard += `- [Actions](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)\n`;
            dashboard += `- [Security](https://github.com/${context.repo.owner}/${context.repo.repo}/security)\n`;
            dashboard += `- [Insights](https://github.com/${context.repo.owner}/${context.repo.repo}/pulse)\n`;
            dashboard += `- [Issues](https://github.com/${context.repo.owner}/${context.repo.repo}/issues)\n\n`;
            
            dashboard += '---\n';
            dashboard += '*This dashboard is automatically updated every hour and after workflow completions.*\n';
            
            // Save dashboard
            fs.writeFileSync('CI_CD_DASHBOARD.md', dashboard);
            
            // Save raw data for other tools
            fs.writeFileSync('dashboard-data.json', JSON.stringify(dashboardData, null, 2));
            
            console.log('Dashboard generated successfully');

      - name: Commit dashboard updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CI_CD_DASHBOARD.md dashboard-data.json
          git commit -m "docs: update CI/CD dashboard [skip ci]" || exit 0
          git push

      - name: Create status issue if health is critical
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('dashboard-data.json')) {
              return;
            }
            
            const data = JSON.parse(fs.readFileSync('dashboard-data.json', 'utf8'));
            const successRate = parseFloat(data.summary.successRate);
            
            if (successRate < 50) {
              // Check if there's already an open critical status issue
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'ci-critical,automated',
                state: 'open'
              });
              
              if (issues.data.length === 0) {
                const issueBody = `## 🚨 Critical CI/CD Health Alert
            
            **Current Success Rate:** ${successRate}%
            **Failed Runs:** ${data.summary.failedRuns}/${data.summary.totalRuns}
            **Alert Triggered:** ${new Date().toISOString()}
            
            ### Immediate Actions Required:
            1. 🔍 Investigate recent workflow failures
            2. 📊 Review test stability and infrastructure
            3. 🔧 Fix critical issues blocking deployments
            4. 📈 Monitor recovery progress
            
            ### Affected Workflows:
            ${Object.entries(data.workflows).map(([name, workflow]) => 
              `- **${name}**: ${workflow.successRate}% success rate`
            ).join('\n')}
            
            This issue will be automatically closed when the success rate improves above 75%.
            
            ---
            *This issue was automatically created by the CI/CD monitoring system.*`;
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🚨 Critical CI/CD Health Alert - ${successRate}% Success Rate`,
                  body: issueBody,
                  labels: ['ci-critical', 'automated', 'high-priority']
                });
              }
            } else if (successRate >= 75) {
              // Close any open critical status issues
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'ci-critical,automated',
                state: 'open'
              });
              
              for (const issue of issues.data) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `✅ **CI/CD Health Recovered**\n\nSuccess rate has improved to ${successRate}%. Automatically closing this alert.`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              }
            }

  # Job to send notifications for critical failures
  notify-failures:
    name: Notify Critical Failures
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"🚨 CI/CD Failure Alert\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Workflow Failed:* ${{ github.event.workflow_run.name }}\n*Branch:* ${{ github.event.workflow_run.head_branch }}\n*Commit:* ${{ github.event.workflow_run.head_sha }}\n*Repository:* ${{ github.repository }}\"
                  }
                },
                {
                  \"type\": \"actions\",
                  \"elements\": [
                    {
                      \"type\": \"button\",
                      \"text\": {
                        \"type\": \"plain_text\",
                        \"text\": \"View Workflow\"
                      },
                      \"url\": \"${{ github.event.workflow_run.html_url }}\"
                    }
                  ]
                }
              ]
            }" \
            $SLACK_WEBHOOK_URL

      - name: Send email notification
        if: env.SENDGRID_API_KEY != ''
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        run: |
          cat > email-notification.json << EOF
          {
            "personalizations": [
              {
                "to": [{"email": "$NOTIFICATION_EMAIL"}],
                "subject": "🚨 CI/CD Failure: ${{ github.event.workflow_run.name }}"
              }
            ],
            "from": {"email": "ci-cd@${{ github.repository_owner }}.com"},
            "content": [
              {
                "type": "text/html",
                "value": "<h2>CI/CD Workflow Failure</h2><p><strong>Workflow:</strong> ${{ github.event.workflow_run.name }}</p><p><strong>Branch:</strong> ${{ github.event.workflow_run.head_branch }}</p><p><strong>Commit:</strong> ${{ github.event.workflow_run.head_sha }}</p><p><strong>Repository:</strong> ${{ github.repository }}</p><p><a href=\"${{ github.event.workflow_run.html_url }}\">View Workflow Details</a></p>"
              }
            ]
          }
          EOF
          
          curl -X POST "https://api.sendgrid.com/v3/mail/send" \
            -H "Authorization: Bearer $SENDGRID_API_KEY" \
            -H "Content-Type: application/json" \
            -d @email-notification.json