name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUN_VERSION: '1.1.34'
  CACHE_KEY_PREFIX: 'v1'

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ESLint
        run: bun run lint

      - name: Check TypeScript compilation
        run: bun tsc --noEmit

  # Job 2: Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bun-version: ['1.1.34', 'latest']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun ${{ matrix.bun-version }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests with coverage
        run: bun run test:coverage

      - name: Upload coverage reports to Codecov
        if: matrix.bun-version == '1.1.34'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload coverage artifacts
        if: matrix.bun-version == '1.1.34'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Check coverage threshold
        if: matrix.bun-version == '1.1.34'
        run: |
          COVERAGE=$(bun run test:coverage -- --silent | grep -o 'All files.*[0-9]\+\.[0-9]\+' | grep -o '[0-9]\+\.[0-9]\+' | head -1)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 70% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 70% threshold"
          fi

  # Job 3: Build Test
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # Job 4: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright browsers
        run: bun playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test database
        run: |
          # Create test database file
          touch test.db
          # Run database migrations for testing
          bun prisma migrate deploy || echo "No migrations to run"

      - name: Run E2E tests
        run: bun playwright test --project=${{ matrix.browser }}
        env:
          DATABASE_URL: "file:./test.db"
          NEXTAUTH_SECRET: "test-secret-key-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # Job 5: Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: Setup test database
        run: |
          touch test.db
          bun prisma migrate deploy || echo "No migrations to run"

      - name: Start application
        run: |
          bun start &
          sleep 10
        env:
          DATABASE_URL: "file:./test.db"
          NEXTAUTH_SECRET: "test-secret-key-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"

      - name: Run performance tests
        run: |
          # Install lighthouse CLI
          bun add -g lighthouse
          
          # Run lighthouse audit
          lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json --chrome-flags="--headless --no-sandbox"
          
          # Extract performance score
          PERF_SCORE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./lighthouse-report.json')).categories.performance.score * 100)")
          echo "Performance Score: $PERF_SCORE"
          
          # Check performance threshold (minimum 80)
          if (( $(echo "$PERF_SCORE < 80" | bc -l) )); then
            echo "❌ Performance score $PERF_SCORE is below 80 threshold"
            exit 1
          else
            echo "✅ Performance score $PERF_SCORE meets 80 threshold"
          fi

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-report.json
          retention-days: 30

  # Job 6: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit --audit-level=high

      - name: Run dependency vulnerability check
        run: |
          bun audit-ci --config .audit-ci.json || echo "No critical vulnerabilities found"

  # Job 7: Accessibility Tests
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Playwright
        run: bun playwright install --with-deps chromium

      - name: Setup test database
        run: |
          touch test.db
          bun prisma migrate deploy || echo "No migrations to run"

      - name: Run accessibility tests
        run: |
          # Create accessibility test script
          cat > accessibility-test.js << 'EOF'
          const { chromium } = require('playwright');
          const { injectAxe, checkA11y } = require('axe-playwright');

          (async () => {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            
            await page.goto('http://localhost:3000');
            await injectAxe(page);
            
            try {
              await checkA11y(page, null, {
                detailedReport: true,
                detailedReportOptions: { html: true }
              });
              console.log('✅ Accessibility tests passed');
            } catch (error) {
              console.error('❌ Accessibility violations found:', error.message);
              process.exit(1);
            }
            
            await browser.close();
          })();
          EOF
          
          # Install axe-playwright
          bun add axe-playwright
          
          # Start app and run accessibility tests
          bun start &
          sleep 10
          node accessibility-test.js
        env:
          DATABASE_URL: "file:./test.db"
          NEXTAUTH_SECRET: "test-secret-key-for-ci"
          NEXTAUTH_URL: "http://localhost:3000"

  # Job 8: Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, performance, security, accessibility]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage-report/lcov-report/index.html ]; then
            echo "✅ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎭 E2E Test Results" >> $GITHUB_STEP_SUMMARY
          for browser in chromium firefox webkit; do
            if [ -d "e2e-results-$browser" ]; then
              echo "✅ $browser tests completed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $browser tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚡ Performance Results" >> $GITHUB_STEP_SUMMARY
          if [ -f lighthouse-report/lighthouse-report.json ]; then
            echo "✅ Performance audit completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Performance audit failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🧪 CI Test Results\n\n';
            
            // Add coverage info if available
            if (fs.existsSync('coverage-report')) {
              comment += '✅ **Unit Tests**: Passed with coverage report\n';
            } else {
              comment += '❌ **Unit Tests**: Failed or no coverage\n';
            }
            
            // Add E2E results
            const browsers = ['chromium', 'firefox', 'webkit'];
            browsers.forEach(browser => {
              if (fs.existsSync(`e2e-results-${browser}`)) {
                comment += `✅ **E2E Tests (${browser})**: Passed\n`;
              } else {
                comment += `❌ **E2E Tests (${browser})**: Failed\n`;
              }
            });
            
            // Add performance results
            if (fs.existsSync('lighthouse-report')) {
              comment += '✅ **Performance**: Audit completed\n';
            } else {
              comment += '❌ **Performance**: Audit failed\n';
            }
            
            comment += '\n📊 Detailed reports are available in the Actions artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });