generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  conversations Conversation[]
  sessions      Session[]
  settings      UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id           String        @id @default(cuid())
  userId       String
  title        String
  model        String
  currentModel String
  settings     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Message[]
  modelChanges ModelChange[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  model          String
  metadata       String?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([model])
  @@index([conversationId, createdAt])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  defaultModel       String   @default("llama3.2")
  defaultTemperature Float?   @default(0.7)
  ollamaUrl          String   @default("http://localhost:11434")
  preferences        String?
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ModelChange {
  id             String       @id @default(cuid())
  conversationId String
  fromModel      String?
  toModel        String
  changedAt      DateTime     @default(now())
  messageIndex   Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, changedAt])
  @@index([toModel])
}
